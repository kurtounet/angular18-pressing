import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { catchError, Observable, throwError } from 'rxjs';
import { AuthRequest } from '../models/auth-request';
import { AuthResponse } from '../models/auth-response';
import { environment } from '../environments/environment';
import { User } from '../models/user.model';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private roles: Array<string> = [];
  private urlApiAuth: string = `${environment.baseApiUrl}/login_check`;

  constructor(
    private httpClient: HttpClient,
    private router: Router
  ) { }

  public setLocalStorageToken(token: string): void {
    localStorage.setItem("token", token);
  }

  public getLocalStorageToken(): string | null {
    return localStorage.getItem("token");
  }

  public setLocalStorageUser(user: User): void {
    localStorage.setItem("user", JSON.stringify(user));
  }

  public getLocalStorageUser(): User | null {
    const user = localStorage.getItem("user");
    return user ? JSON.parse(user) : null;
  }

  public getUserRoles(): Array<string> {
    return this.roles;
  }

  public setUserRoles(roles: Array<string>): void {
    this.roles = roles;
  }

  public getAuthCurrentUser(): Observable<User> {
    return this.httpClient.get<User>(`${environment.baseApiUrl}/currentuser`).pipe(
      catchError(this.handleError)
    );
  }

  public getAuthenticatedUser(): void {
    this.getAuthCurrentUser().subscribe({
      next: (data: User) => {
        this.setUserRoles(data.roles ?? []);
        this.setLocalStorageUser(data);
      },
      error: (error) => {
        console.error('Erreur lors de la récupération de l\'utilisateur authentifié:', error);
      }
    });
  }

  public getToken(authRequest: AuthRequest): Observable<AuthResponse> {
    return this.httpClient.post<AuthResponse>(this.urlApiAuth, authRequest).pipe(
      catchError(this.handleError)
    );
  }

  public authentication(authRequest: AuthRequest): void {
    this.getToken(authRequest).subscribe({
      next: (data: AuthResponse) => {
        if (data.token) {
          this.setLocalStorageToken(data.token);
          this.getAuthenticatedUser();
          this.router.navigate(["/admin/dashboard"]);
        }
      },
      error: (error) => {
        console.error('Erreur lors de l\'authentification:', error);
      }
    });
  }

  public logOut(): void {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    this.setUserRoles([]);
    this.router.navigate(["/login"]);
  }

  private handleError(error: HttpErrorResponse): Observable<never> {
    console.error('Une erreur est survenue:', error.error || error.message);
    return throwError(() => new Error('Une erreur est survenue ; veuillez réessayer plus tard.'));
  }
}
